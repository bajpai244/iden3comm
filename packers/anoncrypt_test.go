package packers

import (
	"encoding/json"
	"fmt"
	"github.com/iden3/iden3comm/mock"
	"log"
	"testing"

	"github.com/stretchr/testify/require"
	"gopkg.in/square/go-jose.v2"
)

func TestAnoncryptPacker_Pack(t *testing.T) {
	var msgBytes = []byte(`{"id":"123","type":"https://iden3-communication.io/authorization/1.0/response","from":"119tqceWdRd2F6WnAyVuFQRFjK3WUXq2LorSPyG9LJ","body":{"scope":[{"type":"zeroknowledge","circuit_id":"auth","pub_signals":["1","18311560525383319719311394957064820091354976310599818797157189568621466950811","323416925264666217617288569742564703632850816035761084002720090377353297920"],"proof_data":{"pi_a":["11130843150540789299458990586020000719280246153797882843214290541980522375072","1300841912943781723022032355836893831132920783788455531838254465784605762713","1"],"pi_b":[["20615768536988438336537777909042352056392862251785722796637590212160561351656","10371144806107778890538857700855108667622042215096971747203105997454625814080"],["19598541350804478549141207835028671111063915635580679694907635914279928677812","15264553045517065669171584943964322117397645147006909167427809837929458012913"],["1","0"]],"pi_c":["16443309279825508893086251290003936935077348754097470818523558082502364822049","2984180227766048100510120407150752052334571876681304999595544138155611963273","1"],"protocol":""}}]}}`)

	privKey, err := mock.ResolveEncPrivateKey("myencryptionkey")
	require.NoError(t, err)

	key, err := mock.ResolveKeyID("myencryptionkey")
	require.NoError(t, err)

	anonPacker := AnoncryptPacker{}
	ciphertext, err := anonPacker.Pack(msgBytes, AnoncryptPackerParams{
		RecipientKey: &key,
	})
	require.NoError(t, err)
	require.NotEqual(t, 0, len(ciphertext))

	fmt.Println(string(ciphertext))
	// decrypt in user side.
	jwe, err := jose.ParseEncrypted(string(ciphertext))
	require.NoError(t, err)
	require.EqualValues(t, jwe.Header.ExtraHeaders[jose.HeaderType], MediaTypeEncryptedMessage)

	iden3BytesMsg, err := jwe.Decrypt(privKey)
	require.NoError(t, err)
	require.Equal(t, msgBytes, iden3BytesMsg)
	log.Printf("decrypted anoncrypt message: %s", iden3BytesMsg)
}
func TestAnoncryptPacker_Unpack(t *testing.T) {
	var msgBytes = []byte(`{"id":"123","type":"https://iden3-communication.io/authorization/1.0/response","from":"119tqceWdRd2F6WnAyVuFQRFjK3WUXq2LorSPyG9LJ","body":{"scope":[{"type":"zeroknowledge","circuit_id":"auth","pub_signals":["1","18311560525383319719311394957064820091354976310599818797157189568621466950811","323416925264666217617288569742564703632850816035761084002720090377353297920"],"proof_data":{"pi_a":["11130843150540789299458990586020000719280246153797882843214290541980522375072","1300841912943781723022032355836893831132920783788455531838254465784605762713","1"],"pi_b":[["20615768536988438336537777909042352056392862251785722796637590212160561351656","10371144806107778890538857700855108667622042215096971747203105997454625814080"],["19598541350804478549141207835028671111063915635580679694907635914279928677812","15264553045517065669171584943964322117397645147006909167427809837929458012913"],["1","0"]],"pi_c":["16443309279825508893086251290003936935077348754097470818523558082502364822049","2984180227766048100510120407150752052334571876681304999595544138155611963273","1"],"protocol":""}}]}}`)

	jwe := `eyJhbGciOiJFQ0RILUVTK0EyNTZLVyIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTI1NiIsIngiOiJ3UEgyUXZZWS1hallZTGxMeVlCbXA4UlNtT1FxZk1Sd0ZScHJXd2RZUHZJIiwieSI6InZ5emVEbTBUelFIQlNlSHAxdHZ4MDcxa2YxYjFCWHNVRjk1TktfNmFJZUkifSwia2lkIjoibXllY25yeXB0aW9ua2V5IiwidHlwIjoiYXBwbGljYXRpb24vaWRlbjNjb21tLWVuY3J5cHRlZC1qc29uIn0.GigxG3vmQYL6N77rwTgFoA-cNzx47pFUtsi9h-hqLq8_xDVZNZ3oO3GrCDMN1E-ac5oDDuIj7pgLJEP1fpxy-NnZ6ymTmkVm.nulPZpqHE30WEDDC9v2s6g.2j0hg6SXQlx-WM5YBaEJx0df81juMAsEI0ntwCVmlQs0qG2bC82yan5A27JsMM6iBBF15BtYp4ZJCKhRCkksWdK9n7xmf9wiv0WqAsua627K0Ni6Y_pSvp48G_CnJ1wePpnjO5dPwrYszMrGwI1GIzSbQeL00wzDkpWhXWIBLagaW8jjih_40tdjZAkLIe8lenUVmWPTzhN3O8raVopzYJDBKQ0VIr6X1SMgPtGeq9rAouSn2BvQX_RGBAIRvVH4fnLML5pRjvJkVLqR0Gx015gQEVERtn7lKiGsRHhYuy8X40HDoaxF5oykhF_JWsvTgwbopwxTYIiZuXfiElHr95QFGlDE6HbnpeBIckeGlix3SwB1ZoMuqMnaL7c5FjjVRTHjB1G5WAKMLV-BtpaS8tEgSfuT1z5SJ3jzTVuabN0cFZZKjqGO2xdhY5RbuLIxJdBAHPP00if26ajet0C9hegi2Ga-dDjVFlfUVwfT8UJWbjL7XlEnsV7ykhBRBThRzQ0Y7exzln_t4HcmaXRWfzOKM8RvSsEUnHxaMb9lUjKefClZxjjcfpNOy6rebwaaziiFaoznHHexCaEzO3LEWuRxsR3pw3_Fu8tOUVmauxDsWcZhLkiy8PFiGjQlUozvawktrbZglw4OyLlCSJfgtoqnjI6jo82OyEKkW4106TuwpGRT16qPDEr0WW8H--R2mm_J-rgtQMJz83NzV1IYj0IUaVw6XYxdAzOblWw7e7LZ0ZACkcZ1hJYCgYAF0T9u6AzIrHLLi7LHtA7ZgSwUoR4bYOU9tep9oe5Ik4nfzpQ1CC6WalcFyS40L3175nE_8Vi5LOattQSQwC8L7IGqTN9mKzPZDlDT4luFcw-DU2kdMO-cE6C1uBwjMntY1iWi3GNA7cb-AY4AEdj4yOF_cTymZcYD766cgpOShxMzM0kB0x1hfRilahgOz0kGnL97_jybBAcfRR7E71Z0I0FjFxkUewcm4xqU6R_pWsFQoygid7WwDPd76YOOOCuiNH2gNyz4rQ8D7kkX2PwIjDENBcF8s-obuyflZQfHVldxZo8FyW5eXI-WNYb_bpQRpj6Z5DqwdKST7ps_9G7N0BYmwFM-iktstDkugSoFrLtuvM2tkCdvfyypeTpFvPEQUUOa8NmqAqBngaH_XSh9RBffq-bbzP-bubairlq5xYfY66q-HnX0Kdxc35hV1KVgquJg1mWeNXB4Czy5dtqpNmXZqbpVAJNwWsawyIMJ8wEyVlC0C9LF7EkTIhZXkcmlgUPXx0WHx-c_-d3KSGV_lJrAnrsfIHXRaqCuhVCMPL5kATPXi3S6_T0iB3BfOk_GX_XbAvffCC_zAFx-ElaWcOenM3xVooVUBQPJPPhe5aPi6a7559FJAS5DMRUDIvPuGyOYNFR8tVHUkfyHTRX3CTRL1lcAQFbtZTtH_5jfRXWgY2ba2-nT9pOI9kV7pIPwYlFX.IKrgFSysXo-395uTfYhSkxWcHaUM5AEeZsnMCh-cezI`
	anonPacker := NewAnoncryptPacker(mock.ResolveEncPrivateKey)
	iden3BytesMsg, err := anonPacker.Unpack([]byte(jwe))
	require.NoError(t, err)
	actualMsgBytes, err := json.Marshal(iden3BytesMsg)

	require.NoError(t, err)
	require.JSONEq(t, string(msgBytes), string(actualMsgBytes))

}
